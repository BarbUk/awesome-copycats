-- {{{ Required libraries
local awesome, client, mouse, screen, tag = awesome, client, mouse, screen, tag
local string, os, table, tostring, tonumber, type = string, os, table, tostring, tonumber, type

local gears         = require("gears")
local awful         = require("awful")
                      require("awful.autofocus")
local wibox         = require("wibox")
local beautiful     = require("beautiful")
local naughty       = require("naughty")
local lain          = require("lain")
local hotkeys_popup = require("awful.hotkeys_popup").widget
local spotify       = require("spotify")
local cyclefocus    = require('cyclefocus')
-- }}}

-- beautiful init
beautiful.init(awful.util.getdir("config") .. "/themes/barbuk/theme.lua")

local noti = {}
noti.id = nil
function noti:notify (msg)
  self.id = naughty.notify({ text = msg, timeout = 5, replaces_id = self.id}).id
end

cyclefocus.default_preset.font        = 'PragmataPro 14'
cyclefocus.display_next_count         = 5
cyclefocus.display_prev_count         = 5

naughty.config.defaults.font          = "PragmataPro 10"
naughty.config.defaults.icon_size     = 80
naughty.config.defaults.border_width  = 3

local pulse_sink = "$(pacmd list-sinks | awk '/* index/ {print $3}')"
local pulse_step = 5
local scriptdir = os.getenv("HOME") .. "/.dotfiles/bin/"


-- {{{ Error handling
if awesome.startup_errors then
  naughty.notify({ preset = naughty.config.presets.critical,
                   title = "Oops, there were errors during startup!",
                   text = awesome.startup_errors })
end

do
  local in_error = false
  awesome.connect_signal("debug::error", function (err)
    if in_error then return end
    in_error = true
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, an error happened!",
                     text = tostring(err) })
    in_error = false
  end)
end
-- }}}

-- {{{ Variable definitions
-- common
local modkey     = "Mod4"
local altkey     = "Mod1"
local terminal   = "termite"
local editor     = "vim"

-- user defined
local browser    = "google-chrome-stable"
local gui_editor = "subl"
local graphics   = "gimp"
local file_explorer = "pcmanfm"
awful.util.terminal = terminal

-- table of layouts to cover with awful.layout.inc, order matters.
awful.layout.layouts = {
  awful.layout.suit.floating,
  awful.layout.suit.tile,
  -- awful.layout.suit.tile.left,
  -- awful.layout.suit.tile.bottom,
  awful.layout.suit.tile.top,
  awful.layout.suit.fair,
  -- awful.layout.suit.fair.horizontal,
  -- awful.layout.suit.spiral,
  awful.layout.suit.spiral.dwindle,
  -- awful.layout.suit.max,
  -- awful.layout.suit.max.fullscreen,
  -- awful.layout.suit.magnifier,
  -- awful.layout.suit.corner.nw,
  -- awful.layout.suit.corner.ne,
  -- awful.layout.suit.corner.sw,
  -- awful.layout.suit.corner.se,
}

local lo = awful.layout.layouts
awful.util.tagnames = {
  { names =  { "", "", "", "", "", "" },
    layout = { lo[5], lo[5], lo[5], lo[5], lo[5], lo[5] },
  },
  { names =  { "", "", "", "", "", "" },
    layout = {  lo[5], lo[5], lo[5], lo[5], lo[5], lo[5] },
  },
}

-- lain
lain.layout.termfair.nmaster        = 3
lain.layout.termfair.ncol           = 1
lain.layout.termfair.center.nmaster = 3
lain.layout.termfair.center.ncol    = 1
-- }}}

-- {{{ Helper functions
local function client_menu_toggle_fn()
  local instance = nil

  return function ()
    if instance and instance.wibox.visible then
      instance:hide()
      instance = nil
    else
      instance = awful.menu.clients({ theme = { width = 250 } })
    end
  end
end
-- }}}

-- {{{ Wibox
local markup = lain.util.markup
local white  = beautiful.fg_focus
local gray   = beautiful.fg_normal

-- Separators
local spl   = wibox.widget.textbox(markup.bold('  '))
local spc   = wibox.widget.textbox(markup.bold(' '))
local spr   = wibox.widget.textbox(markup.bold('  '))

-- Textclock
local clock = wibox.widget.textclock(markup(white, "%H:%M "))

-- Calendar
lain.widget.calendar({
  attach_to = { clock },
  cal       = '/usr/bin/cal --monday --color=always',
  followtag = true,
  notification_preset = {
    font = 'PragmataPro 10',
    fg   = white,
    bg   = beautiful.bg_normal
}})

-- MPD
local mpd = lain.widget.mpd({
  settings = function()
    music_dir = "~/Zik/"
    if mpd_now.state == "play" then
        widget:set_markup(" " .. markup(gray, mpd_now.artist) .. " - " .. markup(white, mpd_now.title) .. " ")
    else
        widget:set_markup("")
    end
  end
})

-- Spotify
local spotify = spotify({
  cmd = scriptdir .. "sp metadata",
  settings = function()
    if spotify_now.artist ~= "not_running" then
      widget:set_markup(" " .. markup(gray, spotify_now.artist) .. " - " .. markup(white, spotify_now.title) .. " ")
    else
      widget:set_markup("")
    end
  end
})

-- /home fs
local fshome = lain.widget.fs({
  partition = "/",
  options = "--exclude-type=tmpfs",
  notification_preset = { fg = white, bg = beautiful.bg_normal },
  settings  = function()
    hdd = ""
    p   = ""

    if tonumber(fs_now.used) >= 90 then
      hdd = "  hd "
      p   = fs_now.used .. " "
    end

    widget:set_markup(markup(gray, hdd) .. markup(white, p))
  end
})

-- Battery
local baticon = wibox.widget.textbox("")
local bat = lain.widget.contrib.tpbat({
  settings = function()
    if bat_now.status == "discharging" then
      if bat_now.perc and tonumber(bat_now.perc) <= 5 then
        baticon:set_markup_silently(" ")
      elseif bat_now.perc and tonumber(bat_now.perc) <= 25 then
        baticon:set_markup_silently(" ")
      elseif bat_now.perc and tonumber(bat_now.perc) <= 55 then
        baticon:set_markup_silently(" ")
      elseif bat_now.perc and tonumber(bat_now.perc) <= 75 then
        baticon:set_markup_silently(" ")
      else
        baticon:set_markup_silently("")
      end
    else
      baticon:set_markup_silently("")
    end
    widget:set_markup(markup.font(beautiful.font, " " .. bat_now.perc .. "%"))
  end
})

local volicon = wibox.widget.textbox(" ")
local volume = lain.widget.pulseaudio({
  settings = function()
    if volume_now.muted == "yes" then
      widget:set_text("Mute")
      volicon:set_markup_silently(" ")
    else
      widget:set_markup(markup(white, volume_now.right))
      volicon:set_markup_silently(" ")
    end
  end
})

-- Weather
local weather = lain.widget.weather({
  city_id = 934131,
  current_call  = "curl --connect-timeout 3 --max-time 5 -s 'http://api.openweathermap.org/data/2.5/weather?id=%s&units=%s&lang=%s&APPID=%s'",
  forecast_call = "curl --connect-timeout 3 --max-time 5 -s 'http://api.openweathermap.org/data/2.5/forecast/daily?id=%s&units=%s&lang=%s&cnt=%s&APPID=%s'",
  settings = function()
    descr = weather_now["weather"][1]["description"]
    units = math.floor(weather_now["main"]["temp"])
    widget:set_markup(markup("#eca4c4", " " .. units .. "°C"))
  end
})

-- Net
local net = lain.widget.net({
  settings = function()
  if iface ~= "network off" and
    string.match(weather.widget.text, "N/A")
  then
    weather.update()
  end

  widget:set_markup(markup("#B3E383", markup.bold("↓ ") .. net_now.received) .. " " .. markup("#F4E59F", markup.bold("↑ ") .. net_now.sent))
  end
})

-- CPU
local cpuicon = wibox.widget.textbox(" ")
local cpu = lain.widget.sysload({
  settings = function()
    widget:set_markup(markup("#E5CBCB", load_1 .. " " .. load_5))
  end
})

-- Create a wibox for each screen and add it
local taglist_buttons = awful.util.table.join(
  awful.button({ }, 1, function(t) t:view_only() end),
  awful.button({ modkey }, 1, function(t)
    if client.focus then
        client.focus:move_to_tag(t)
    end
  end),
  awful.button({ }, 3, awful.tag.viewtoggle),
  awful.button({ modkey }, 3, function(t)
    if client.focus then
        client.focus:toggle_tag(t)
    end
  end),
  awful.button({ }, 4, function(t) awful.tag.viewnext(t.screen) end),
  awful.button({ }, 5, function(t) awful.tag.viewprev(t.screen) end)
)

local tasklist_buttons = awful.util.table.join(
  awful.button({ }, 1, function (c)
    if c == client.focus then
      c.minimized = true
    else
      -- Without this, the following
      -- :isvisible() makes no sense
      c.minimized = false
      if not c:isvisible() and c.first_tag then
          c.first_tag:view_only()
      end
      -- This will also un-minimize
      -- the client, if needed
      client.focus = c
      c:raise()
    end
  end),
  awful.button({ }, 3, client_menu_toggle_fn()),
  awful.button({ }, 4, function ()
    awful.client.focus.byidx(1)
  end),
  awful.button({ }, 5, function ()
    awful.client.focus.byidx(-1)
  end)
)

local function set_wallpaper(s)
  -- Wallpaper
  if beautiful.wallpaper then
    local wallpaper = beautiful.wallpaper
    -- If wallpaper is a function, call it with the screen
    if type(wallpaper) == "function" then
      wallpaper = wallpaper(s)
    end
    gears.wallpaper.maximized(wallpaper, s, true)
  end
end

-- Re-set wallpaper when a screen's geometry changes (e.g. different resolution)
screen.connect_signal("property::geometry", set_wallpaper)

local function update_txt_layoutbox(s)
    -- Writes a string representation of the current layout in a textbox widget
    local txt_l = beautiful["layout_txt_" .. awful.layout.getname(awful.layout.get(s))] or ""
    s.mytxtlayoutbox:set_text(txt_l)
end

awful.screen.connect_for_each_screen(function(s)
  -- Wallpaper
  set_wallpaper(s)

  -- Tags
  screen_index = s.index
  awful.tag(awful.util.tagnames[screen_index].names, s, awful.util.tagnames[screen_index].layout)

  -- Create a promptbox for each screen
  s.mypromptbox = awful.widget.prompt()

  -- Textual layoutbox
  s.mytxtlayoutbox = wibox.widget.textbox(beautiful["layout_txt_" .. awful.layout.getname(awful.layout.get(s))])
  awful.tag.attached_connect_signal(s, "property::selected", function () update_txt_layoutbox(s) end)
  awful.tag.attached_connect_signal(s, "property::layout", function () update_txt_layoutbox(s) end)
  s.mytxtlayoutbox:buttons(awful.util.table.join(
                         awful.button({}, 1, function() awful.layout.inc(1) end),
                         awful.button({}, 3, function() awful.layout.inc(-1) end),
                         awful.button({}, 4, function() awful.layout.inc(1) end),
                         awful.button({}, 5, function() awful.layout.inc(-1) end)))

  -- Create a taglist widget
  s.mytaglist = awful.widget.taglist(s, awful.widget.taglist.filter.all, taglist_buttons)

  -- Create a tasklist widget
  s.mytasklist = awful.widget.tasklist(s, awful.widget.tasklist.filter.currenttags, tasklist_buttons)

  -- Create the wibox
  s.mywibox = awful.wibar({ position = "top", screen = s, height = beautiful.wibar_height })

  local left = { -- Left widgets
    layout = wibox.layout.fixed.horizontal,
    s.mytaglist,
    spr,
    s.mytxtlayoutbox,
    spr,
    s.mypromptbox,
  }

  local right = { -- Right widgets
    layout = wibox.layout.fixed.horizontal,
    mpd.widget,
    spotify.widget,
    spc,
    wibox.widget.systray(),
    spl,
    net.widget,
    spl,
    cpuicon,
    cpu.widget,
    fshome.widget,
    spl,
    baticon,
    bat.widget,
    spl,
    volicon,
    volume.widget,
    spl,
    weather.icon,
    weather.widget,
    spl,
    clock
  }

  local time = {
    layout = wibox.layout.fixed.horizontal,
    weather.icon,
    weather.widget,
    spl,
    clock
  }

  if s.index == 1 then
    -- Add widgets to the wibox
    s.mywibox:setup {
      layout = wibox.layout.align.horizontal,
      left,
      s.mytasklist, -- Middle widget
      right
  }
  elseif s.index == 2 then
    -- Add widgets to the wibox
    s.mywibox:setup {
      layout = wibox.layout.align.horizontal,
      left,
      s.mytasklist, -- Middle widget,
      time
    }
  end
end)
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
  awful.button({ }, 4, awful.tag.viewnext),
  awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}
-- {{{ Key bindings
globalkeys = awful.util.table.join(
  -- Take a screenshot
  awful.key({ "Shift" }, "Print", function ()
    awful.util.spawn_with_shell([[
      maim --select --hidecursor --highlight --color=0.3,0.4,0.6,0.3 --bordersize=3 --format=png --quality=10 |
      convert - \( +clone -background black -shadow 25x5+10+10 \) +swap -background none -layers merge +repage ~/screenshots/$(date +%F-%T).png
    ]])
  end),
  awful.key({ }, "Print", function ()
    awful.util.spawn_with_shell([[
      maim --select --hidecursor --highlight --color=0.3,0.4,0.6,0.3 --bordersize=3 --format=png --quality=10 |
      convert - \( +clone -background black -shadow 25x5+10+10 \) +swap -background none -layers merge +repage - |
      xclip -selection clipboard -t image/png
    ]])
  end),

  -- Tag browsing
  awful.key({ modkey,           }, "Left",   awful.tag.viewprev,
    {description = "view previous", group = "tag"}),
  awful.key({ modkey,           }, "Right",  awful.tag.viewnext,
    {description = "view next", group = "tag"}),
  awful.key({ modkey,           }, "Escape", awful.tag.history.restore,
    {description = "go back", group = "tag"}),

  -- Default client focus
  awful.key({ altkey,           }, "j",
    function ()
      awful.client.focus.byidx(1)
    end,
    {description = "focus next by index", group = "client"}
  ),
  awful.key({ altkey,           }, "k",
    function ()
      awful.client.focus.byidx(-1)
    end,
    {description = "focus previous by index", group = "client"}
  ),

  -- By direction client focus
  awful.key({ modkey }, "j", function()
    awful.client.focus.bydirection("down")
    if client.focus then client.focus:raise() end
  end),
  awful.key({ modkey }, "k", function()
    awful.client.focus.bydirection("up")
    if client.focus then client.focus:raise() end
  end),
  awful.key({ modkey }, "h", function()
    awful.client.focus.bydirection("left")
    if client.focus then client.focus:raise() end
  end),
  awful.key({ modkey }, "l", function()
    awful.client.focus.bydirection("right")
    if client.focus then client.focus:raise() end
  end),

  -- Layout manipulation
  awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end,
    {description = "swap with next client by index", group = "client"}),
  awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end,
    {description = "swap with previous client by index", group = "client"}),
  awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end,
    {description = "focus the next screen", group = "screen"}),
  awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end,
    {description = "focus the previous screen", group = "screen"}),
  awful.key({ modkey,           }, "u", awful.client.urgent.jumpto,
    {description = "jump to urgent client", group = "client"}),
  -- modkey+Tab: cycle through all clients.
  awful.key({ modkey }, "Tab", function(c)
    cyclefocus.cycle({modifier="Super_L"})
  end),
  -- modkey+Shift+Tab: backwards
  awful.key({ modkey, "Shift" }, "Tab", function(c)
      cyclefocus.cycle({modifier="Super_L"})
  end),
  awful.key({ altkey,           }, "Tab", function ()
    awful.client.focus.byidx(1)
    if client.focus then
      client.focus:raise()
    end
  end),

  -- Show/Hide Wibox
  awful.key({ modkey }, "b", function ()
    for s in screen do
      s.mywibox.visible = not s.mywibox.visible
    end
  end),

  -- On the fly useless gaps change
  awful.key({ altkey, "Control" }, "+", function () lain.util.useless_gaps_resize(1) end),
  awful.key({ altkey, "Control" }, "-", function () lain.util.useless_gaps_resize(-1) end),

  -- Dynamic tagging
  awful.key({ modkey, "Shift" }, "n", function () lain.util.add_tag() end),
  awful.key({ modkey, "Shift" }, "r", function () lain.util.rename_tag() end),
  awful.key({ modkey, "Shift" }, "Left", function () lain.util.move_tag(-1) end),  -- move to previous tag
  awful.key({ modkey, "Shift" }, "Right", function () lain.util.move_tag(1) end),  -- move to next tag
  awful.key({ modkey, "Shift" }, "d", function () lain.util.delete_tag() end),

  -- Standard program
  awful.key({ modkey,           }, "Return", function () awful.spawn(terminal) end,
    {description = "open a terminal", group = "launcher"}),
  awful.key({ modkey, "Control" }, "r", awesome.restart,
    {description = "reload awesome", group = "awesome"}),
  awful.key({ modkey, "Shift"   }, "q", awesome.quit,
    {description = "quit awesome", group = "awesome"}),

  awful.key({ altkey, "Shift"   }, "l",     function () awful.tag.incmwfact( 0.05)          end,
    {description = "increase master width factor", group = "layout"}),
  awful.key({ altkey, "Shift"   }, "h",     function () awful.tag.incmwfact(-0.05)          end,
    {description = "decrease master width factor", group = "layout"}),
  awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1, nil, true) end,
    {description = "increase the number of master clients", group = "layout"}),
  awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1, nil, true) end,
    {description = "decrease the number of master clients", group = "layout"}),
  awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1, nil, true)    end,
    {description = "increase the number of columns", group = "layout"}),
  awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1, nil, true)    end,
    {description = "decrease the number of columns", group = "layout"}),
  awful.key({ modkey,           }, "space", function () awful.layout.inc( 1)                end,
    {description = "select next", group = "layout"}),
  awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(-1)                end,
    {description = "select previous", group = "layout"}),

  awful.key({ modkey, "Control" }, "n",
    function ()
      local c = awful.client.restore()
      -- Focus restored client
      if c then
        client.focus = c
        c:raise()
      end
    end,
  {description = "restore minimized", group = "client"}),

  -- Widgets popups
  awful.key({ altkey, }, "c", function () lain.widget.calendar.show(7) end),
  awful.key({ altkey, }, "h", function () fshome.show(7, awful.screen.focused()) end),
  awful.key({ altkey, }, "w", function () weather.show(7) end),

  -- Volume control
  awful.key({ }, "XF86AudioRaiseVolume", function ()
    awful.util.spawn_with_shell("pamixer --increase " .. pulse_step .. " --allow-boost --sink " .. pulse_sink, false )
    volume.update()
  end),
  awful.key({ }, "XF86AudioLowerVolume", function ()
    awful.util.spawn_with_shell("pamixer --decrease " .. pulse_step .. " --sink " .. pulse_sink, false )
    volume.update()
  end),
  awful.key({ }, "XF86AudioMute", function ()
    awful.util.spawn_with_shell("pamixer --toggle-mute --sink " .. pulse_sink, false )
    volume.update()
  end),

  -- Theme control
  awful.key({ }, "XF86Launch1", function ()
    awful.spawn(scriptdir .. "change_theme")
  end),

  -- Music control
  awful.key({ }, "XF86AudioStop", function ()
    os.execute("mpc stop", false )
    mpd.update()
  end),
  awful.key({ }, "XF86AudioPlay", function ()
    os.execute("mpc toggle || " .. scriptdir .. "sp play")
    mpd.update()
    spotify.update()
  end),
  awful.key({ }, "XF86AudioPrev", function ()
    os.execute("mpc prev || " .. scriptdir .. "sp prev")
    mpd.update()
    spotify.update()
  end),
  awful.key({ }, "XF86AudioNext", function ()
    os.execute("mpc next || " .. scriptdir .. "sp next")
    mpd.update()
    spotify.update()
  end),

  -- Backlight control
  awful.key({ }, "XF86MonBrightnessUp", function ()
      awful.spawn.easy_async(scriptdir .. "light_bar up", function(stdout)
        noti:notify(stdout)
      end)
  end),
  awful.key({ }, "XF86MonBrightnessDown", function ()
      awful.spawn.easy_async(scriptdir .. "light_bar down", function(stdout)
        noti:notify(stdout)
      end)
  end),

  awful.key({ }, "XF86ScreenSaver", function ()
      awful.spawn("slock", false )
  end),

  awful.key({ }, "XF86Display", function ()
      awful.util.spawn_with_shell(scriptdir .. "detect_screen")
  end),

  -- Copy primary to clipboard (terminals to gtk)
  awful.key({ modkey }, "c", function () awful.util.spawn_with_shell("xsel | xsel -i -b") end),
  -- Copy clipboard to primary (gtk to terminals)
  awful.key({ modkey }, "v", function () awful.spawn("copyq 'select(0); sleep(30); paste()'") end),

  -- User programs
  awful.key({ modkey }, "s", function () awful.spawn(gui_editor) end),
  awful.key({ modkey }, "g", function () awful.spawn(graphics) end),
  awful.key({ modkey }, "d", function () awful.spawn(file_explorer) end),

  awful.key({ modkey, "Shift"   }, "Return", function () awful.util.spawn_with_shell(scriptdir .. "dmenu_ssh") end),
  awful.key({ modkey, "Control" }, "Return", function () awful.util.spawn_with_shell(scriptdir .. "dmenu_raise") end),
  awful.key({ modkey, altkey    }, "Return", function () awful.util.spawn_with_shell(scriptdir .. "dmenu_edit") end),
  awful.key({ modkey, altkey, "Control" }, "Return", function ()
    awful.util.spawn_with_shell(scriptdir .. "dmenu_monitoring")
  end),
  awful.key({ modkey, "Shift"   }, "p",      function () awful.util.spawn_with_shell(scriptdir .. "snippy") end),
  awful.key({ modkey, "Shift"   }, "m",      function () awful.util.spawn_with_shell("termite --class='center' --geometry='700x400' --exec=ncmpcpp &") end),
  awful.key({ modkey }, "0",                 function () awful.spawn( scriptdir .. "qrcodize", false ) end),
  awful.key({ modkey }, "t",
    function ()
      awful.spawn( browser .. " --profile-directory='Profile 4' https://mail.google.com/mail/mu/mp/540/?mui=ca#tl/R%C3%A9ception", false )
    end
  ),
  awful.key({ modkey }, "y",
    function ()
      awful.spawn( browser .. " --profile-directory='Profile 2' https://mail.google.com/mail/u/0/#inbox", false )
    end
  ),

  -- Default
  -- Prompt
  awful.key({ modkey }, "r", function () awful.screen.focused().mypromptbox:run() end,
            {description = "run prompt", group = "launcher"})
)

clientkeys = awful.util.table.join(
  awful.key({ altkey, "Shift"   }, "m",      lain.util.magnify_client                         ),
  awful.key({ modkey,           }, "f",
    function (c)
      c.fullscreen = not c.fullscreen
      c:raise()
    end,
    {description = "toggle fullscreen", group = "client"}),
  awful.key({ "Mod1"            }, "F4", function (c) c:kill() end,
    {description = "close", group = "client"}),
  awful.key({ modkey            }, "q", function (c) c:kill() end,
    {description = "close", group = "client"}),
  awful.key({ modkey, "Control" }, "space", awful.client.floating.toggle,
    {description = "toggle floating", group = "client"}),
  awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end,
    {description = "move to master", group = "client"}),
  awful.key({ modkey,           }, "o", function (c) c:move_to_screen() end,
    {description = "move to screen", group = "client"}),
  awful.key({ modkey,           }, "t", function (c) c.ontop = not c.ontop end,
    {description = "toggle keep on top", group = "client"}),
  awful.key({ modkey,           }, "n",
    function (c)
      -- The client currently has the input focus, so it cannot be
      -- minimized, since minimized clients can't have the focus.
      c.minimized = true
    end ,
    {description = "minimize", group = "client"}),
  awful.key({ modkey,           }, "m",
    function (c)
      c.maximized = not c.maximized
      c.maximized_vertical = not c.maximized_vertical
      c.maximized_horizontal = not c.maximized_horizontal
      c:raise()
    end ,
    {description = "maximize", group = "client"})
)

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, 9 do
  globalkeys = awful.util.table.join(globalkeys,
  -- View tag only.
  awful.key({ modkey }, "#" .. i + 9,
    function ()
      local screen = awful.screen.focused()
      local tag = screen.tags[i]
      if tag then
        tag:view_only()
      end
    end,
    {description = "view tag #"..i, group = "tag"}),
  -- Toggle tag display.
  awful.key({ modkey, "Control" }, "#" .. i + 9,
    function ()
      local screen = awful.screen.focused()
      local tag = screen.tags[i]
      if tag then
        awful.tag.viewtoggle(tag)
      end
    end,
    {description = "toggle tag #" .. i, group = "tag"}),
  -- Move client to tag.
  awful.key({ modkey, "Shift" }, "#" .. i + 9,
    function ()
      if client.focus then
        local tag = client.focus.screen.tags[i]
        if tag then
          client.focus:move_to_tag(tag)
        end
      end
    end,
    {description = "move focused client to tag #"..i, group = "tag"}),
  -- Toggle tag on focused client.
  awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
    function ()
      if client.focus then
        local tag = client.focus.screen.tags[i]
        if tag then
          client.focus:toggle_tag(tag)
        end
      end
    end,
    {description = "toggle focused client on tag #" .. i, group = "tag"})
  )
end

clientbuttons = awful.util.table.join(
  awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
  awful.button({ modkey }, 1, awful.mouse.client.move),
  awful.button({ modkey }, 3, awful.mouse.client.resize)
)

-- Set keys
root.keys(globalkeys)
-- }}}
-- {{{ Rules
-- Rules to apply to new clients (through the "manage" signal).
awful.rules.rules = {
  -- All clients will match this rule.
  { rule = { },
    properties = {
      border_width      = beautiful.border_width,
      border_color      = beautiful.border_normal,
      focus             = awful.client.focus.filter,
      raise             = true,
      keys              = clientkeys,
      buttons           = clientbuttons,
      screen            = awful.screen.preferred,
      placement         = awful.placement.no_overlap+awful.placement.no_offscreen,
      size_hints_honor  = false
    },
    callback = function(c)
      c.maximized, c.maximized_vertical, c.maximized_horizontal = false, false, false
    end
  },

  -- Titlebars
  { rule_any = { type = { "dialog", "normal" } }, properties = { titlebars_enabled = false } },
  { rule = { class = "Pidgin" }, properties             = { screen = 1, tag = awful.util.tagnames[1].names[1] } },
  { rule = { class = "wmail" }, properties              = { screen = 1, tag = awful.util.tagnames[1].names[2] } },
  { rule = { class = "Dia" }, properties                = { screen = 1, tag = awful.util.tagnames[1].names[6] } },
  { rule = { class = "Gimp" }, properties               = { screen = 1, tag = awful.util.tagnames[1].names[6] } },
  { rule = { class = "Inkscape" }, properties           = { screen = 1, tag = awful.util.tagnames[1].names[6] } },
  { rule = { class = "Transmission-gtk" }, properties   = { screen = 1, tag = awful.util.tagnames[1].names[6] } },
  { rule = { class = "spotify" }, properties            = { screen = 1, tag = awful.util.tagnames[1].names[6] } },
  { rule = { class = "sublime-text" }, properties       = { screen = 1, tag = awful.util.tagnames[1].names[4] } },
  { rule = { class = "Subl3" }, properties              = { screen = 1, tag = awful.util.tagnames[1].names[4] }, except = { instance = "subl3" } },

  { rule = { class = "MPlayer" }, properties            = { border_width = 0, focus = yes } },
  { rule = { class = "mpv" }, properties                = { border_width = 0, focus = yes} },
  { rule = { class = "albert" }, properties             = { floating = true, focus = yes } },
  { rule = { class = "feh" }, properties                = { floating = true, focus = yes } },
  { rule = { class = "Toggl Desktop" }, properties      = { focus = yes } },
  { rule = { class = "Wine" }, properties               = { border_width = 0, floating = true } },
  { rule = { class = "copyq" }, properties              = { border_width = 0, focus = yes } },

  { rule = { name = "Slack Call Minipanel" }, { class = "sun-awt-X11-XFramePeer" } , properties = { floating = true} },

  { rule = { class = "Gimp", role = "gimp-image-window" }, properties = { maximized_horizontal = true, maximized_vertical = true } },

  { rule = { class = "center" }, properties = { floating = true, focus = yes },
    callback = function (c)
      awful.placement.centered(c, nil)
    end
  },
  { rule = { name = "Error", name = "Unlock Keyring" }, properties = { floating = true, focus = yes },
    callback = function (c)
      awful.placement.centered(c, nil)
    end
  },
  { rule = { role = "GtkFileChooserDialog" }, properties = { floating = true, focus = yes },
    callback = function (c)
      awful.placement.centered(c, nil)
    end
  }
}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.connect_signal("manage", function (c)
  -- Set the windows at the slave,
  -- i.e. put it at the end of others instead of setting it master.
  -- if not awesome.startup then awful.client.setslave(c) end

  if awesome.startup and
    not c.size_hints.user_position
    and not c.size_hints.program_position then
      -- Prevent clients from being unreachable after screen count changes.
      awful.placement.no_offscreen(c)
  end
end)

-- Add a titlebar if titlebars_enabled is set to true in the rules.
client.connect_signal("request::titlebars", function(c)
  -- buttons for the titlebar
  local buttons = awful.util.table.join(
    awful.button({ }, 1, function()
      client.focus = c
      c:raise()
      awful.mouse.client.move(c)
    end),
    awful.button({ }, 3, function()
      client.focus = c
      c:raise()
      awful.mouse.client.resize(c)
    end)
  )

  awful.titlebar(c, {size = 16}) : setup {
    { -- Left
      awful.titlebar.widget.iconwidget(c),
      buttons = buttons,
      layout  = wibox.layout.fixed.horizontal
    },
    { -- Middle
      { -- Title
        align  = "center",
        widget = awful.titlebar.widget.titlewidget(c)
      },
      buttons = buttons,
      layout  = wibox.layout.flex.horizontal
    },
    { -- Right
      awful.titlebar.widget.floatingbutton (c),
      awful.titlebar.widget.maximizedbutton(c),
      awful.titlebar.widget.stickybutton   (c),
      awful.titlebar.widget.ontopbutton    (c),
      awful.titlebar.widget.closebutton    (c),
      layout = wibox.layout.fixed.horizontal()
    },
    layout = wibox.layout.align.horizontal
  }
end)

-- Enable sloppy focus, so that focus follows mouse.
client.connect_signal("mouse::enter", function(c)
  if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
    and awful.client.focus.filter(c) then
    client.focus = c
  end
end)

-- No border for maximized clients
client.connect_signal("focus",
  function(c)
    if c.maximized or c.floating == true then
      c.border_width = 0
    -- no borders if only 1 client visible
    elseif #awful.screen.focused().clients > 1 then
      c.border_width = beautiful.border_width
      c.border_color = beautiful.border_focus
    end
  end
)

client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}
